{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\u00bfQu\u00e9 es el pensamiento computacional?","text":"<p>El pensamiento computacional es un enfoque de resoluci\u00f3n de problemas que utiliza conceptos y principios de la inform\u00e1tica. Es una habilidad clave que no solo se aplica al desarrollo de software o a la programaci\u00f3n, sino que puede usarse para abordar y resolver problemas complejos en diversas \u00e1reas de una forma estructurada y eficiente.</p> <p>Wing acu\u00f1\u00f3 el concepto en 2006 como \"aplicar procesos de pensamiento l\u00f3gico, sist\u00e9mico, algor\u00edtmico\u2026 para lograr representar las soluciones a un problema como secuencias de instrucciones y algoritmos\".</p> <p>El pensamiento computacional es \"el proceso de pensamiento que interviene en la formulaci\u00f3n de los problemas y sus soluciones, de manera que las soluciones se representen de forma que pueda ser realizada por un procesador de informaci\u00f3n\" (Cuny, Snyder y Wing, 2010).</p> <p>Otra definici\u00f3n ampliamente aceptada de pensamiento computacional afirma que es un \"proceso por el cual se reconocen aspectos de la inform\u00e1tica en el mundo que nos rodea y aplicar herramientas y t\u00e9cnicas de la inform\u00e1tica para comprender sistemas y procesos naturales y artificiales\" (Royal Society, 2012).</p> <p>Seymour Papert (1980s)</p> <p>Aunque Papert no us\u00f3 el t\u00e9rmino \"pensamiento computacional\", su trabajo sobre el uso del computador en la educaci\u00f3n influy\u00f3 fuertemente en este concepto. Papert desarroll\u00f3 el lenguaje de programaci\u00f3n Logo para ense\u00f1ar a los ni\u00f1os a programar y resolver problemas. Argumentaba que aprender a programar les permite a los estudiantes desarrollar habilidades de resoluci\u00f3n de problemas de manera creativa.</p> <p></p>"},{"location":"index.html#claves-del-pensamiento-computacional","title":"Claves del pensamiento computacional","text":"<ol> <li> <p>Descomposici\u00f3n: Consiste en dividir un problema complejo en partes m\u00e1s peque\u00f1as y manejables.Es importante ya que facilita el an\u00e1lisis y la comprensi\u00f3n del problema, permitiendo abordar cada parte por separado y buscar soluciones para cada una de ellas. Por ejemplo, al construir un robot, se pueden dividir las tareas en dise\u00f1o mec\u00e1nico, programaci\u00f3n de los movimientos, sensores, etc.</p> </li> <li> <p>Reconocimiento de patrones: Implica identificar similitudes o elementos comunes entre diferentes problemas o situaciones. Al reconocer patrones, se pueden reutilizar soluciones que ya han funcionado en situaciones similares, lo que ahorra tiempo y esfuerzo. En historia, por ejemplo, pueden analizar patrones de eventos hist\u00f3ricos que conducen a revoluciones o guerras.</p> </li> <li> <p>Abstracci\u00f3n: Es el proceso de enfocarse en la informaci\u00f3n relevante y eliminar los detalles no esenciales. Facilita la resoluci\u00f3n de problemas complejos al centrarse en los elementos clave. La abstracci\u00f3n es fundamental para dise\u00f1ar modelos y simplificar problemas, permitiendo que se resuelvan de manera m\u00e1s r\u00e1pida y eficiente.</p> </li> <li> <p>Algoritmos: Un algoritmo es un conjunto de pasos o instrucciones bien definidas para resolver un problema. Los algoritmos son esenciales en el pensamiento computacional porque proporcionan un enfoque sistem\u00e1tico para la resoluci\u00f3n de problemas. Estos permiten encontrar soluciones paso a paso y pueden ser aplicados tanto en problemas de programaci\u00f3n como en situaciones cotidianas, como seguir una receta o una rutina de ejercicio.En educaci\u00f3n f\u00edsica, pueden crear una secuencia de pasos para realizar una rutina de ejercicio o una estrategia en un juego.</p> </li> <li> <p>Evaluaci\u00f3n y depuraci\u00f3n: Implica revisar, probar y mejorar soluciones o algoritmos para asegurarse de que funcionen de manera \u00f3ptima. A trav\u00e9s de la evaluaci\u00f3n, se identifican errores o ineficiencias en la soluci\u00f3n. La depuraci\u00f3n es el proceso de corregir esos errores para mejorar la eficacia y la precisi\u00f3n. Este paso es fundamental para garantizar que la soluci\u00f3n es adecuada y efectiva.</p> </li> <li> <p>Generalizaci\u00f3n: Se refiere a la capacidad de aplicar una soluci\u00f3n a problemas similares o relacionados. La generalizaci\u00f3n permite que una soluci\u00f3n no solo funcione para un problema espec\u00edfico, sino que se extienda a otros problemas que comparten caracter\u00edsticas similares. Esto maximiza la eficiencia del esfuerzo aplicado en la resoluci\u00f3n de problemas.</p> </li> <li> <p>Pensamiento l\u00f3gico: Es la capacidad de razonar y tomar decisiones basadas en hechos y reglas claras. El pensamiento l\u00f3gico es esencial para tomar decisiones informadas y coherentes en cada paso del proceso de resoluci\u00f3n de problemas. Es la base que sustenta todas las dem\u00e1s habilidades del pensamiento computacional, asegurando que las soluciones sean l\u00f3gicas y racionales.</p> </li> <li> <p>Iteraci\u00f3n: Se refiere al proceso de repetir un conjunto de pasos hasta que se logre el resultado deseado. La iteraci\u00f3n permite mejorar y refinar soluciones de manera continua. En inform\u00e1tica, la iteraci\u00f3n es clave en la creaci\u00f3n de programas o algoritmos que necesitan ser probados y ajustados constantemente.</p> </li> <li> <p>Simulaci\u00f3n y modelado:Crear modelos o simulaciones que representen sistemas reales o hipot\u00e9tios. En geograf\u00eda, los estudiantes pueden usar software para simular fen\u00f3menos naturales como terremotos o erupciones volc\u00e1nicas.</p> </li> <li> <p>Uso de la programaci\u00f3n: Programar no solo mejora habilidades t\u00e9cnicas, sino que fomenta la resoluci\u00f3n de problemas de manera estructurada. En clases de inform\u00e1tica, los alumnos aprenden a programar con herramientas como Scratch.</p> </li> </ol> <p></p>"},{"location":"index.html#beneficios-del-pensamiento-computacional-en-el-aula","title":"Beneficios del Pensamiento Computacional en el Aula","text":"<ul> <li> <p>Mejora de habilidades de resoluci\u00f3n de problemas: Al enfrentar a los estudiantes con problemas que deben descomponer y analizar.</p> </li> <li> <p>Fomento del pensamiento cr\u00edtico y creativo: Los alumnos aprenden a ver problemas desde m\u00faltiples perspectivas y a crear soluciones innovadoras.</p> </li> <li> <p>Preparaci\u00f3n para el futuro: El pensamiento computacional es una habilidad esencial en muchas carreras tecnol\u00f3gicas.</p> </li> <li> <p>Interdisciplinariedad: Puede aplicarse en m\u00faltiples materias, no solo en ciencias o tecnolog\u00eda.</p> </li> </ul>"},{"location":"index2.html","title":"Desarrollo del Pensamiento Computacional","text":"<p>El pensamiento computacional es un enfoque de resoluci\u00f3n de problemas que utiliza conceptos y principios de la inform\u00e1tica. Es una habilidad clave que no solo se aplica al desarrollo de software o a la programaci\u00f3n, sino que puede usarse para abordar y resolver problemas complejos en diversas \u00e1reas de una forma estructurada y eficiente.</p> <p>Wing acu\u00f1\u00f3 el concepto en 2006 como \"aplicar procesos de pensamiento l\u00f3gico, sist\u00e9mico, algor\u00edtmico\u2026 para lograr representar las soluciones a un problema como secuencias de instrucciones y algoritmos\".</p> <p>El pensamiento computacional es \"el proceso de pensamiento que interviene en la formulaci\u00f3n de los problemas y sus soluciones, de manera que las soluciones se representen de forma que pueda ser realizada por un procesador de informaci\u00f3n\" (Cuny, Snyder y Wing, 2010).</p> <p>Otra definici\u00f3n ampliamente aceptada de pensamiento computacional afirma que es un \"proceso por el cual se reconocen aspectos de la inform\u00e1tica en el mundo que nos rodea y aplicar herramientas y t\u00e9cnicas de la inform\u00e1tica para comprender sistemas y procesos naturales y artificiales\" (Royal Society, 2012).</p> <p>Seymour Papert (1980s)</p> <p>Aunque Papert no us\u00f3 el t\u00e9rmino \"pensamiento computacional\", su trabajo sobre el uso del computador en la educaci\u00f3n influy\u00f3 fuertemente en este concepto. Papert desarroll\u00f3 el lenguaje de programaci\u00f3n Logo para ense\u00f1ar a los ni\u00f1os a programar y resolver problemas. Argumentaba que aprender a programar les permite a los estudiantes desarrollar habilidades de resoluci\u00f3n de problemas de manera creativa.</p> <p></p>"},{"location":"index2.html#claves-del-pensamiento-computacional","title":"Claves del pensamiento computacional","text":"<ol> <li> <p>Descomposici\u00f3n: Consiste en dividir un problema complejo en partes m\u00e1s peque\u00f1as y manejables.Es importante ya que facilita el an\u00e1lisis y la comprensi\u00f3n del problema, permitiendo abordar cada parte por separado y buscar soluciones para cada una de ellas. Por ejemplo, al construir un robot, se pueden dividir las tareas en dise\u00f1o mec\u00e1nico, programaci\u00f3n de los movimientos, sensores, etc.</p> </li> <li> <p>Reconocimiento de patrones: Implica identificar similitudes o elementos comunes entre diferentes problemas o situaciones. Al reconocer patrones, se pueden reutilizar soluciones que ya han funcionado en situaciones similares, lo que ahorra tiempo y esfuerzo. En historia, por ejemplo, pueden analizar patrones de eventos hist\u00f3ricos que conducen a revoluciones o guerras.</p> </li> <li> <p>Abstracci\u00f3n: Es el proceso de enfocarse en la informaci\u00f3n relevante y eliminar los detalles no esenciales. Facilita la resoluci\u00f3n de problemas complejos al centrarse en los elementos clave. La abstracci\u00f3n es fundamental para dise\u00f1ar modelos y simplificar problemas, permitiendo que se resuelvan de manera m\u00e1s r\u00e1pida y eficiente.</p> </li> <li> <p>Algoritmos: Un algoritmo es un conjunto de pasos o instrucciones bien definidas para resolver un problema. Los algoritmos son esenciales en el pensamiento computacional porque proporcionan un enfoque sistem\u00e1tico para la resoluci\u00f3n de problemas. Estos permiten encontrar soluciones paso a paso y pueden ser aplicados tanto en problemas de programaci\u00f3n como en situaciones cotidianas, como seguir una receta o una rutina de ejercicio.En educaci\u00f3n f\u00edsica, pueden crear una secuencia de pasos para realizar una rutina de ejercicio o una estrategia en un juego.</p> </li> <li> <p>Evaluaci\u00f3n y depuraci\u00f3n: Implica revisar, probar y mejorar soluciones o algoritmos para asegurarse de que funcionen de manera \u00f3ptima. A trav\u00e9s de la evaluaci\u00f3n, se identifican errores o ineficiencias en la soluci\u00f3n. La depuraci\u00f3n es el proceso de corregir esos errores para mejorar la eficacia y la precisi\u00f3n. Este paso es fundamental para garantizar que la soluci\u00f3n es adecuada y efectiva.</p> </li> <li> <p>Generalizaci\u00f3n: Se refiere a la capacidad de aplicar una soluci\u00f3n a problemas similares o relacionados. La generalizaci\u00f3n permite que una soluci\u00f3n no solo funcione para un problema espec\u00edfico, sino que se extienda a otros problemas que comparten caracter\u00edsticas similares. Esto maximiza la eficiencia del esfuerzo aplicado en la resoluci\u00f3n de problemas.</p> </li> <li> <p>Pensamiento l\u00f3gico: Es la capacidad de razonar y tomar decisiones basadas en hechos y reglas claras. El pensamiento l\u00f3gico es esencial para tomar decisiones informadas y coherentes en cada paso del proceso de resoluci\u00f3n de problemas. Es la base que sustenta todas las dem\u00e1s habilidades del pensamiento computacional, asegurando que las soluciones sean l\u00f3gicas y racionales.</p> </li> <li> <p>Iteraci\u00f3n: Se refiere al proceso de repetir un conjunto de pasos hasta que se logre el resultado deseado. La iteraci\u00f3n permite mejorar y refinar soluciones de manera continua. En inform\u00e1tica, la iteraci\u00f3n es clave en la creaci\u00f3n de programas o algoritmos que necesitan ser probados y ajustados constantemente.</p> </li> <li> <p>Simulaci\u00f3n y modelado:Crear modelos o simulaciones que representen sistemas reales o hipot\u00e9tios. En geograf\u00eda, los estudiantes pueden usar software para simular fen\u00f3menos naturales como terremotos o erupciones volc\u00e1nicas.</p> </li> <li> <p>Uso de la programaci\u00f3n: Programar no solo mejora habilidades t\u00e9cnicas, sino que fomenta la resoluci\u00f3n de problemas de manera estructurada. En clases de inform\u00e1tica, los alumnos aprenden a programar con herramientas como Scratch.</p> </li> </ol> <p></p>"},{"location":"index2.html#beneficios-del-pensamiento-computacional-en-el-aula","title":"Beneficios del Pensamiento Computacional en el Aula","text":"<ul> <li> <p>Mejora de habilidades de resoluci\u00f3n de problemas: Al enfrentar a los estudiantes con problemas que deben descomponer y analizar.</p> </li> <li> <p>Fomento del pensamiento cr\u00edtico y creativo: Los alumnos aprenden a ver problemas desde m\u00faltiples perspectivas y a crear soluciones innovadoras.</p> </li> <li> <p>Preparaci\u00f3n para el futuro: El pensamiento computacional es una habilidad esencial en muchas carreras tecnol\u00f3gicas.</p> </li> <li> <p>Interdisciplinariedad: Puede aplicarse en m\u00faltiples materias, no solo en ciencias o tecnolog\u00eda.</p> </li> </ul>"},{"location":"index3.html","title":"Herramientas para el Pensamiento Computacional","text":"<p>Scracht es una de las aplicaciones m\u00e1s extendidas en el mundo para trabajar el Pensamiento Computacional. Desarrollado por el Instituto de Tecnolog\u00eda de Massachusetts (MIT), su entorno permite introducirse en el mundo de la programaci\u00f3n sin conocimientos complejos sobre c\u00f3digo.</p> <p></p> <p>Se programa mediante bloques y cuenta con una interfaz atractiva visualmente, permitiendo al alumnado comenzar a programar desde el primer momento. Se pueden crear historias interactivas, juegos, animaciones, m\u00fasica y producciones art\u00edsticas.</p> <p>Scratch se trabaja como aplicaci\u00f3n web, pero tambi\u00e9n est\u00e1 disponible en formato app  con el nombre de \u201cScratch Junior\u201d. Dicha app permite a los alumnos y alumnas introducirse en la programaci\u00f3n desde edades muy tempranas, pudiendo utilizarse desde los 5 a\u00f1os.</p>"},{"location":"index3.html#principales-caracteristicas-de-scratch","title":"Principales caracter\u00edsticas de Scratch","text":"<ol> <li> <p>Programaci\u00f3n basada en bloques: Los usuarios ensamblan bloques de colores que representan diferentes acciones, l\u00f3gicas o eventos. Estos bloques encajan como piezas de un rompecabezas, lo que facilita la comprensi\u00f3n de los conceptos de programaci\u00f3n.</p> </li> <li> <p>Entorno visual: Todo el proceso de creaci\u00f3n es altamente visual, lo que permite a los estudiantes ver inmediatamente c\u00f3mo sus instrucciones afectan a los personajes y objetos en la pantalla.</p> </li> <li> <p>Desarrollo de habilidades de pensamiento computacional: Scratch ayuda a los usuarios a descomponer problemas complejos en pasos m\u00e1s peque\u00f1os, establecer patrones, trabajar con abstracciones y automatizar procesos mediante algoritmos, todas ellas habilidades clave en el pensamiento computacional.</p> </li> <li> <p>Comunicaci\u00f3n y colaboraci\u00f3n: Scratch fomenta la participaci\u00f3n de una comunidad global de usuarios que comparten sus proyectos, comentan y colaboran en ideas.</p> </li> </ol> <p></p>"},{"location":"index3.html#ejemplos-de-uso-de-scratch-en-el-pensamiento-computacional","title":"Ejemplos de uso de Scratch en el pensamiento computacional:","text":"<ul> <li> <p>Animaci\u00f3n de personajes: Usar bucles y condicionales para mover personajes en la pantalla.</p> </li> <li> <p>Juegos interactivos: Crear interacciones con el teclado o el rat\u00f3n que desencadenen eventos como cambios de escena, puntuaciones, o sonidos.</p> </li> <li> <p>Historias interactivas: Contar historias en las que los personajes respondan a eventos y se muevan a trav\u00e9s de diferentes escenarios.</p> </li> </ul>"},{"location":"index3.html#scratch-en-diferentes-materias","title":"Scratch en diferentes materias","text":"<p>Scratch es una herramienta que no solo se limita a la ense\u00f1anza de programaci\u00f3n, sino que tambi\u00e9n puede ser utilizada para fortalecer habilidades creativas, colaborativas y de pensamiento cr\u00edtico en una amplia variedad de disciplinas. Algunos argumentos sobre c\u00f3mo Scratch puede beneficiar a diferentes \u00e1reas del conocimiento:</p> <ol> <li>Matem\u00e1ticas: Scratch permite a los estudiantes visualizar conceptos matem\u00e1ticos como coordenadas, geometr\u00eda y secuencias num\u00e9ricas de una manera interactiva y din\u00e1mica. Al crear simulaciones matem\u00e1ticas, los alumnos desarrollan habilidades para descomponer problemas en pasos l\u00f3gicos, algo fundamental en el aprendizaje matem\u00e1tico. Los bucles y variables en Scratch son \u00fatiles para ense\u00f1ar patrones num\u00e9ricos y secuencias.</li> <li>Ciencias: Los profesores pueden usar Scratch para que los alumnos creen modelos de fen\u00f3menos cient\u00edficos, como el ciclo del agua, la interacci\u00f3n de ecosistemas, o simulaciones de movimientos f\u00edsicos. Los alumnos pueden crear sus propios experimentos interactivos, lo que les permite visualizar de manera pr\u00e1ctica conceptos como la gravedad o la energ\u00eda cin\u00e9tica. Al trabajar en simulaciones, los alumnos deben razonar y tomar decisiones sobre c\u00f3mo modelar un fen\u00f3meno cient\u00edfico, lo que fomenta el pensamiento cr\u00edtico.</li> <li>Lengua y Literatura: Scratch permite a los alumnos crear historias interactivas, desarrollando habilidades narrativas y fomentando la creatividad. Los alumnos pueden crear personajes y desarrollar di\u00e1logos o situaciones que refuercen la comprensi\u00f3n de lecturas o temas literarios. Los alumnos pueden escribir guiones y ver c\u00f3mo sus personajes interact\u00faan con los escenarios que crean, promoviendo un enfoque divertido para desarrollar habilidades de escritura.</li> <li>Historia y Ciencias Sociales: Scratch puede ser usado para que los alumnos dise\u00f1en l\u00edneas de tiempo interactivas, permiti\u00e9ndoles explorar eventos hist\u00f3ricos de una manera din\u00e1mica y atractiva. Pueden recrear escenarios hist\u00f3ricos, desarrollando una comprensi\u00f3n m\u00e1s profunda de los eventos al interactuar con ellos. Trabajar en grupos para investigar y crear proyectos en Scratch fomenta la colaboraci\u00f3n y la investigaci\u00f3n en temas sociales o hist\u00f3ricos.</li> <li>Arte: Los alumnos pueden crear obras de arte animadas y experimentar con diferentes t\u00e9cnicas art\u00edsticas a trav\u00e9s de Scratch. Adem\u00e1s de la narrativa textual, pueden usar elementos visuales para expresar conceptos o historias, desarrollando tanto su creatividad como su pensamiento visual. Scratch combina sonido, im\u00e1genes y animaci\u00f3n, lo que lo convierte en una excelente plataforma para proyectos art\u00edsticos multimedia.</li> <li>M\u00fasica: Los alumnos pueden programar secuencias musicales, ajustando tiempos, repeticiones y notas, lo que les permite entender mejor la estructura musical.Pueden experimentar con diferentes ritmos y patrones musicales en tiempo real. Unir m\u00fasica con animaciones o historias en proyectos creativos que combinen varias \u00e1reas del conocimiento.</li> <li>Educaci\u00f3n F\u00edsica: Se pueden crear proyectos que simulen juegos y actividades f\u00edsicas, ayudando a los estudiantes a comprender conceptos de salud y bienestar. Los alumnos pueden programar herramientas para rastrear sus propios logros f\u00edsicos, como pasos o tiempos de carrera, mientras aprenden sobre h\u00e1bitos saludables.</li> </ol>"},{"location":"index3.html#ventajas-para-los-profesores-en-todas-las-materias","title":"Ventajas para los profesores en todas las materias","text":"<p>Fomenta la creatividad: Scratch permite a los alumnos desarrollar soluciones creativas a problemas complejos, lo que lo hace aplicable a cualquier \u00e1rea de estudio.</p> <p>Aprendizaje activo: Los alumnos no solo aprenden teor\u00eda, sino que tambi\u00e9n aplican lo que aprenden a trav\u00e9s de la creaci\u00f3n de proyectos.</p> <p>Colaboraci\u00f3n: La plataforma de Scratch fomenta el trabajo en equipo, ya que los alumnos pueden compartir y colaborar en proyectos, uniendo diferentes disciplinas en un mismo proyecto.</p> <p>Adaptable a cualquier nivel: Scratch es intuitivo y accesible, lo que lo convierte en una herramienta \u00fatil tanto para niveles b\u00e1sicos como avanzados.</p>"}]}